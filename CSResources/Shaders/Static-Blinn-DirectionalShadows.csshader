//
//  The MIT License (MIT)
//
//  Copyright (c) 2014 Tag Games Limited
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

GLSL
{
	VertexShader
	{
        #ifndef GL_ES
        #define lowp
        #define mediump
        #define highp
        #endif

        //attributes
        attribute highp vec4 a_position;
        attribute mediump vec3 a_normal;
        attribute mediump vec2 a_texCoord;

        //uniforms
        uniform mediump vec3 u_lightDir;
        uniform highp mat4 u_wvpMat;
        uniform highp mat4 u_worldMat;
        uniform highp mat4 u_normalMat;
        uniform highp mat4 u_lightMat;

        uniform highp vec3 u_cameraPos;

        //varyings
        varying mediump vec2 vvTexCoord;
        varying mediump vec3 vvHalfVector;
        varying mediump vec3 vvNormal;
        varying highp vec4 vvShadowPosition;

        void main()
        {
            gl_Position = u_wvpMat * a_position;
            vec4 vWorldPosition = u_worldMat * a_position;
            
            //Convert the vertex to shadow space
            vvShadowPosition = u_lightMat * vWorldPosition;
            vvShadowPosition = (vvShadowPosition * 0.5 + 0.5);
            
            //calculate the normal
            vvNormal = (u_normalMat * vec4(a_normal, 1.0)).xyz;
            
            //calculate the half vector.
            vec3 vVertexToEye = normalize(u_cameraPos - vWorldPosition.xyz);
            vvHalfVector = normalize(-u_lightDir + vVertexToEye);
            
            //get the tex coord
            vvTexCoord = a_texCoord;
        }
	}

	FragmentShader
	{
		#ifndef GL_ES
		#define lowp
		#define mediump
		#define highp
		#else
		precision lowp float;
		#endif

		//uniforms
		uniform lowp sampler2D u_texture0;
		uniform highp float u_shadowTolerance;
		uniform highp sampler2D u_shadowMap;

		uniform lowp vec4 u_diffuse;
		uniform lowp vec4 u_specular;
		uniform lowp vec4 u_lightCol;
		uniform mediump vec3 u_lightDir;

		//varyings
		varying mediump vec2 vvTexCoord;
		varying mediump vec3 vvHalfVector;
		varying mediump vec3 vvNormal;
		varying highp vec4 vvShadowPosition;

		void main()
		{
			vec3 vNormal = normalize(vvNormal);
			vec3 vHalfVector = normalize(vvHalfVector);
		    
		    //calculate the diffuse colour
		    float fNdotL = max(dot(vNormal, -u_lightDir), 0.0);
		    vec4 vDiffuse = u_diffuse * fNdotL;
		    
		    //calculate the specular colour
		    float fNdotHV = max(dot(vNormal, vHalfVector), 0.0);
		    float fLightSwitch = step(0.001, fNdotL);
		    vec4 vSpecular = vec4(u_specular.xyz * pow(fNdotHV, u_specular.a) * fLightSwitch, 1.0);
		    
		    //calculate the shadow factor
		    float fMapDepth = texture2D(u_shadowMap, vvShadowPosition.xy).r;
			float fShadowFactor = min(ceil(max((fMapDepth + u_shadowTolerance) - vvShadowPosition.z, 0.0)), 1.0);
		    
			//ensure there is no shadow beyond the borders of the shadow map.
			float fBorderXFactor = min(abs(floor(vvShadowPosition.x)), 1.0);
			float fBorderYFactor = min(abs(floor(vvShadowPosition.y)), 1.0);
			float fBorderZFactor = min(abs(floor(vvShadowPosition.z)), 1.0);
			fShadowFactor = max(max(max(fShadowFactor, fBorderXFactor), fBorderYFactor), fBorderZFactor);
		    
			//calculate the final colour
			vec4 vColour = (vDiffuse + vSpecular) * u_lightCol * fShadowFactor;
			gl_FragColor = vColour * texture2D(u_texture0, vvTexCoord);
		}
	}
}