//
//  The MIT License (MIT)
//
//  Copyright (c) 2017 Tag Games Limited
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

GLSL
{
	VertexShader
	{
#ifndef GL_ES
        #define lowp
        #define mediump
        #define highp
#endif

        //attributes
        attribute highp vec4 a_position;
        attribute mediump vec2 a_texCoord;

        //uniforms
        uniform highp mat4 u_wvpMat;

        //varyings
        varying mediump vec3 v_texCoord;

        void main()
        {
        	//By using'w' as 'z' we ensure that the skybox is always at the maximum depth
            gl_Position = (u_wvpMat * a_position).xyww;
            v_texCoord = normalize(a_position.xyz);
        }
	}

	FragmentShader
	{
#ifndef GL_ES
		#define lowp
		#define mediump
		#define highp
#else
		precision lowp float;
#endif

		//uniforms
		uniform lowp samplerCube u_cubemap0;

		//varyings
		varying mediump vec3 v_texCoord;

		void main()
		{
			gl_FragColor = textureCube(u_cubemap0, v_texCoord);
		}
	}
}